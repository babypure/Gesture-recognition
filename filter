#Do bandpass filter for all files in one folder.
import os
import glob
import scipy.io as sio
import numpy as np
from scipy.signal import butter, lfilter

receive_mat_path = r'..\250217_1_8_1_3_Receive.mat'
mat_receive = sio.loadmat(receive_mat_path)
Receive = mat_receive['Receive']
fs_val = Receive['decimSampleRate'][0, 0]
fs = float(fs_val) * 1e6
print("Loaded sample rate fs =", fs)

center_freq = 7.8125e6
bw = 0.3 * center_freq
f_low = center_freq - bw / 2
f_high = center_freq + bw / 2

if f_high >= fs/2:
    raise ValueError("Upper cut-off frequency greater than or equal to Nyquist frequency (fs/2)")

order = 8
b, a = butter(order, [f_low, f_high], btype='band', fs=fs)
print("Designed bandpass filter with f_low =", f_low, "and f_high =", f_high)

# === Step 2: Setup input and output folders ===
input_folder = r'../1st/'   # Folder containing MAT files with 'signal'
output_folder = r'../output/' # Folder to save processed files

if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# === Step 3: Process each MAT file in the input folder ===
mat_files = glob.glob(os.path.join(input_folder, '*.mat'))
print(f"Found {len(mat_files)} .mat files in {input_folder}")

for file_path in mat_files:
    mat_data = sio.loadmat(file_path)
    if 'signal' not in mat_data:
        print(f"File {os.path.basename(file_path)} does not contain 'signal'. Skipping.")
        continue
        
    signal = mat_data['signal']
    print(f"Processing {os.path.basename(file_path)} with signal shape: {signal.shape}")
    
    # Prepare an array for the filtered signal
    filtered_signal = np.zeros_like(signal)
    
    # Assume signal is a 3D array: (num_samples, num_channels, num_trials)
    num_samples, num_channels, num_trials = signal.shape
    for ch in range(num_channels):
        for tr in range(num_trials):
            filtered_signal[:, ch, tr] = lfilter(b, a, signal[:, ch, tr])
    
    # Save the filtered signal to the output folder
    base_name = os.path.basename(file_path)
    output_file = os.path.join(output_folder, base_name)
    sio.savemat(output_file, {'filtered_signal': filtered_signal})
    print(f"Saved processed file to {output_file}")
